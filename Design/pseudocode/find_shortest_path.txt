-- Define types for convenience
TYPEDEF Map<Component, List<Component>> = Graph
TYPEDEF List<Component> = Path

{-
Function to find the shortest path between two components
on a graph.
-}
FUNCTION find_shortest_path(graph, start, end)
    -- Nodes where the algorithm has already been.
    explored = NEW List<Component>

    -- Queue of where to visit.
    queue = NEW Queue<List<Component>>

    -- Add the start component to the queue.
    queue.emplace(NEW List<Component>{start})

    -- If the path needs to go to itself.
    IF start IS end THEN
        -- Path is just itself.
        out = NEW path
        out.append(end)
        RETURN out
    END

    -- Repeat until the queue has no more entries.
    WHILE queue IS NOT empty
        -- Get the first element from the queue.
        path = queue.pop_front()

        -- Get the last element from path.
        node = path[path.size()-1]

        -- If we have not already explored this node.
        IF explored NOT CONTAINS node THEN
            neighbors = graph[node]

            -- For each adjacent node
            FOR neighbor IN neighbors DO
                -- Make a copy of path so that each iteration
                -- does not change the same path object.
                new_path = DUPLICATE OF path

                -- Add this adjacent node to the path.
                new_path.append(neighbor)

                -- Add the new path to the queue of where to visit
                -- if we have not already visited it.
                queue.emplace(new_path)

                -- We have reached the destination.
                IF neighbor IS end THEN
                    RETURN new_path
                END
            END

            explored.append(node)
        END
    END
END
