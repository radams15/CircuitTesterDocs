{-
Gets the number of unknown currents
Current sources are not calculated as they are known
currents.
-}
FUNCTION get_num_unknown_currents()
	-- Batteries are the only thing with unknown currents.
	RETURN batteries.length()
END FUNCTION


{-
Used to find out the number of both current and
voltage variables.
-}
FUNCTION get_num_vars()
	RETURN node_count + get_num_unknown_currents()
END


{-
Finds the total current leaving a node
-}
FUNCTION get_current_total(node)
	total = 0
	
	FOR c IN current_sources DO
		IF c.n0 == node THEN
			{-
			Positive current leaves, but conventional current
			states that outgoing current must be positive.
			-}
			total += c.value
		ELSEIF c.n1 == node THEN
			{-
			Positive current enters, but conventional current
			states that incoming current must be negative.
			-}
			total -= c.value 
		END
	END
	
	RETURN total
END






{-
Selects the components that have the reference voltage.
This is the voltage that other components are compared
to.
-}
FUNCTION get_ref_nodes()
	to_visit = node_map.copy()
	
	ref_nodes = []
	
	WHILE NOT to_visit.empty()
		-- Get the first component in the nodes to be visited.
		ref_node = to_visit[0]
		
		ref_nodes.append(ref_node)
		
		connected = get_connected_nodes(ref_node)
		
		-- All nodes connected to this node have had their reference
		-- set to this node, so don't check them.
		FOR c IN connected DO
			-- Delete them from the list
			to_visit.remove(c)
		END
	END
	
	RETURN ref_nodes
END



{-
Finds the nodes that are connected to the passed node
-}
FUNCTION get_connected_nodes(node)
	visited = []
	to_visit = [node]
	
	WHILE NOT to_visit.empty()
		-- Pop the first value off of to_visit.
		node_to_visit = to_visit.pop(0)
		
		visited.append(node_to_visit)
		
		FOR c IN components  DO
			IF c.contains(node_to_visit) THEN
				-- Get the opposite node, check that too
				opposite = c.opposite(node_to_visit)
				
				-- Don't check if has already been checked
				IF NOT visited.contains(opposite) THEN
					to_visit.append(opposite)
				END
			END
		END
	END
	
	-- Remove duplicate values from visited.
	visited = remove_unique(visited)
	
	RETURN visited
END






{-
Returns all unknown currents in the
circuit
-}
FUNCTION get_unknown_currents()
	unknowns = []
	
	FOR b IN batteries DO
		-- Batteries have an unknown current before they
		-- are placed into a circuit.
		unknowns.append(NEW UnknownCurrent(b))
	END
	
	RETURN unknowns
END



{-
Returns the index of the component in the array,
if it does not exist, return -1.
-}
FUNCTION get_component_index(array, component)

	-- Iterate over every index in the array
	FOR i IN 0..array.length() DO
		-- If the array component equals the passed component,
		-- return the index.
		IF array[i].equals(component) THEN
			RETURN i
		END
	END
	
	-- Not found, return -1.
	REURN -1
END
