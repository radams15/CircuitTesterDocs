{-
Determines if two floats are
approximately equal.
-}
FUNCTION num_approx_equals(a, b)
	RETURN abs(a-b) < 1E-6
END

{-
Determines if two solutions are
close enough to be equal, as floating
point error can cause two identical
solutions to be slightly off.
-}
FUNCTION approx_equals(solution)
	keys = node_voltages.keys()
	other_keys = solution.node_voltages().keys()

	-- Key difference is all the keys in "keys",
	-- without the keys in "other_keys".
	-- This is zero unless there is a big problem.
	key_difference = keys.without(other_keys)

	FOR k IN keys DO
		-- Check if every key in this equals
		-- the same key in the solution
		IF NOT num_approx_equals(
			solution.get_node_voltage(k),
			get_node_voltage(k)
		) THEN
			RETURN False
		END
	END

	-- Check if all the currents in this are in solution.
	IF NOT has_all_currents(solution) THEN
		RETURN False
	END

	-- Check if all the currents in solution are in this.
	IF NOT solution.has_all_currents(this) THEN
		RETURN False
	END

	-- All checks passed, must be equal
	RETURN True
END



{-
Finds if all the currents in solution
has an identical current in this.
-}
FUNCTION has_all_currents(solution)
	FOR e IN elements DO
		IF NOT has_matching_element(e) THEN
			RETURN False
		END
	END

	RETURN True
END


{-
Determines if this contains passed
element.
-}
FUNCTION has_matching_element(element)
	FOR e IN elements DO
		IF e.n0 == element.n0 AND
			e.n1 == element.n1 AND
			num_approx_equals(
				e.current_solution,
				element.current_solution
			)
		THEN
			RETURN True
		END
	END

	RETURN False
END



{-
Returns the current of the passed resistor.
-}
FUNCTION get_current_for_resistor(resistor)
	RETURN -get_voltage(resistor)/resistor.value;
END


{-
Returns the voltage of the passed node.
-}
FUNCTION get_node_voltage(node)
	RETURN node_voltages[node]
END



{-
Returns the voltage of the passed element.
-}
FUNCTION get_voltage(element)
	RETURN node_voltages[element.n1] - node_voltages[element.n0]
END
